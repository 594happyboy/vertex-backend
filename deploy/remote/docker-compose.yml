name: vertex

services:
  mysql:
    image: mysql:8.0
    container_name: vertex-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: vertex_backend
      TZ: Asia/Shanghai
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - vertex-network

  redis:
    image: redis:7
    container_name: vertex-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - vertex-network

  minio:
    image: minio/minio
    container_name: vertex-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin123
      TZ: Asia/Shanghai
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    networks:
      - vertex-network

  vertex-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vertex-backend
    environment:
      # 数据库配置
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/vertex_backend?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai&useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root123
      # Redis 配置
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      # MinIO 配置
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESSKEY: admin
      MINIO_SECRETKEY: admin123
      # 时区配置
      TZ: Asia/Shanghai
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - redis
      - minio
    networks:
      - vertex-network
    restart: unless-stopped

volumes:
  mysql-data:
  redis-data:
  minio-data:

networks:
  vertex-network:
    driver: bridge


